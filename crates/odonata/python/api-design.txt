

# Python Interface

## Existing interface

### Colors
Just a string "b" or "w"

### Colors

Colors.opposite(Colors.WHITE)   -> Colors.BLACK
Colors.to_index(Colors.BLACK)   -> 1
Colors.to_index(Colors.WHITE)   -> 0

### Piece 
just a str such as "K" or "n"

### Pieces

Pieces.PIECES_BLACK   -> "pnbrqk"
Pieces.PIECES_WHITE   -> "PNBRQK"
Pieces.PAWN    -> 0
Pieces.KNIGHT  -> 1
...
Pieces.KING    -> 5

Pieces.colour("r")   -> 'b'
Pieces.colour("K")   -> 'w'

Pieces.to_index("k")  -> 5
Pieces.all_of("b")  -> "pnbrqk"


Pieces.is_valid("J") -> False
Pieces.is_valid("K") -> True

### Square

Square(63)
Square.try_parse("c1")  -> Square(3) or None
Square.parse("c1")  -> Square(3) or exception
Square.from_xy(0,0) 
Square.of(63)
s.rank() -> "3"
s.file() -> "e"
s.name() -> "e3"
s.x()    -> 4
s.y()    -> 2
Square.is_off_board(63, 1) -> True

### Move
Just a string such as "a1a3" or "b7b8q"

### Moves

Moves.parse("a1a3") -> (Square.a1, Square.a3, None)
Moves.parse("b7b8q") -> (Square.b7, Square.b8, "q")

Moves.move_attributes(board, "e1c1") -> { 
            'from_sq'     : e1
            'to_sq'       : c1
            'capture_sq'  : c1
            'san'         : "O-O-O"
            'legal'       : True
            'rook_move'   : "a1a4"
            'pseudo_legal': True
            'ep'          : False
            'ep_sqaure'   : None
}

### Squares and Bitboards
B.a1, B.h8, S.a1, S.h8

### Board

b.clone() -> Board:
b.pieces("n") -> Bitboard:
b.piece_on(Square.a1) -> "p"
b.remove(Square.a1) 
b.place(Square.a1, "R")
b.w()  -> Bitboard
b.b()  -> Bitboard
b. turn() -> "w"
b.en_passant() -> Square.b3
b.turn("b")
b[a1|a2|a3|a4] -> "RBNQ"
b.set_piece_on(B.a1, "R")
b.kings() -> Bitboard
b.queens() -> Bitboard
b.rooks() -> Bitboard
b.bishops() -> Bitboard
b.knights() -> Bitboard
b.pawns() -> Bitboard
b.moves() -> [ "a1a2", "b7b8q" ]
b.attacks_from(Square.a2) -> [ "a3", "a4". "a5" ]
b.pseudo_legal_moves() -> [ "a1a2", "b7b8q" ]
b.validate_move("a1a3") -> "Doenst work":
b.castling_rights() -> "KQk"
b.castling_rights("kq")
b.fifty_halfmove_count() -> 30
b.move_number() -> 5
b.make_move("a1a3") -> Board
b.grid() -> "rnbqkbnr\nppppppp\n....\nRNBQKBNRR"
b.to_fen() -> "r7/2p5/8/8/8/8/8/7K KQkq - 7 8"
Board.parse_fen("r7/2p5/8/8/8/8/8/7K KQkq - 7 8") -> Board


### Eval
eval.static_eval(board) -> "10cp" or "win(0)" or "draw"

.... future
Eval(pawn=3, rook=6, queen-2) 
eval.set_king_safety_enabled(False)
eval.square_value( Square.a1)  -> 50 cp
eval.king_safety("b") -> 30cp
eval.phase() -> 70% (nearly end game)


### Algo
algo.search(Board) -> "a1a3"
algo.nps() -> 50000:
algo.time() -> 40sec:
algo.nodes() -> 10million:
algo.pv() -> ["a1a3", "b7b6", "c3c4"]:
algo.max_depth() -> 10:
algo.seldepth() -> 23:
algo.centipawns() -> -34:
algo.mate_in() -> win(5)


### Catalog
Catalog.positions("wac")
Catalog.positions("chess960")

list = Catalog.new("/home/positions.epd")
list.append(...)








#
# Stuff below is thinking out load
#



```board.move("a1a3").move("a3a4")
board['a1'] == "P"
if 'p' in board['a']
if 'R' in board['18']
if 'R' in board['1', '8']

s = square(63)
if 'R' in board[square]

board['a1'] = 'R'

board += "a1a3"
board.move('a1a3.e7e5.a2a4')
board.

board.is_legal_move('a2a4')
board.is_statemate()
board.is_checkmate()
board.antidiag("a3")
board.rank("a3")
board.file("a3")
board.file('a')

board.undo_move()
board.set_name()
board.name()

b = Parser().parse_board_epd("8/p7/8/8/8/8/P7/8 w - - 'one pawn each'")
boards['wac1']






?? board as keys or dict or values


assert board.move('a2a4.b2b4') = board.move('a2a4.b2b4')
assert board.is_legal_move('a2') == False
assert board.is_valid_move('a2') == True

construct boards

board = new BoardOfBits('a1:k a3:K a4:R')
board = new RustBoard('a1:k a3:K a4:R')
board = new PythonChessBoard('a1:k a3:K a4:R')
board.from_fen('pppp')
board.end_game("kKR")
board.wac("1")

## Use list things for game
board = game.at(34)
board = game.end()
board = game.start()

Parser().parse_epd(sdfsfsfs)
b = Parser().fen(dfsdfsfs)
board.convert_to( BoardOfBits() )


board.white.knight_moves

board.white.moves

board.perform(mv)
board.try(mv)
board.play(mv)
board.play_move(mv)

board.apply(mv)
board.execute(mv)
board.undo(mv)




empty = bl.board()
board = bl.board.starting_pos
board.w.knights.moves == a3 + a4 + a5
board.w.knights[0].moves == a3 + a4
print(board.w.knights[0].moves)

>> a3 + a4

a3 in board.w.knights[0].moves

board.move(a2, a4)
print(board)

```
## Display

```
bl.display=color
bl.display=coords
bl.display.progress = True

print(board)

print(board.occupied)
X X X X X
X X X
(using display from above)


print(board.w)

checks_with_white_knights = w.knights.moves & b.king.knight_moves

legal_moves = w.moves
```





## Eval 

evaluate a board, position, set of positions, and a tree of positions
return a score, set of scores, explanation of score

ef.eval(board)
ef.eval(positions)
ef.eval(positions)
ef = functions.material.pawn(3).rook(5)
ef.material.evaluate(board)
ef.position.evaluate(board)
ef.outcome.evaluate(board)

```
f1 = odo.eval.new()
f1.material(p=300, b=400, n=700)
f1.position(endgame)
f1.squares.midgame.pawns[RANK_7] = 50
f1.squares.endgame.knights[a1] = -40
f1.squares.midgame.bishops[a1] = -40

f1.squares.endgame.king[RANK_1] = [1, 20, 30, 40, 40, 30, 20, 1]

odo.eval.evaluate(board).total_score
f1 = odo.eval.new()
f2 = odo.eval.new()
f1.evaluate(board).total_score

score = f1.evaluate(board)
score.total_score
score3 = score1 + score2
score1 = Score.max(score1 + score2)
```


## Endgame

```
for m in legal_moves:
    f1.evaluate(m)
    f1.evaluate(board + m)
    score1 = odo.eval.evaluate(board + m)
    print(score1)
'''
        w     b  total
pawns   3     5   -200
bishops 1     5   -400
total   -     -   1100
'''
print(score1.total)
print(score1 + score2)
'''
             w     b  total
pawns        3     5   -200
bishops      1     5   -400
passed pawns 4     0     50
total        -     -   1100
'''
```

## Search 

```

algo.search(board).best_move

algo.search(board)
algo.stats
algo.analysis



scores = odo.search.alphabeta_multipv(board, f1)

scores.pvs[]
scores.best.pv
scores.best.total_score

score  = scores[move]
algo1 = odo.algo.new()
algo1.depth = 5
algo1.quesence=True
algo1.eval.white = f1
algo1.eval.both = f2

score = algo1.search(board)
scores = algo1.search_multi(board)
score = algo1.search_async(board)
algo1.stop()
algo1.stats.nodes
algo1.stats.branching_factor

engine=uci_engine
engine.settings
engine.configure(props)
engine.search(board)

engine=algo as algo *is* am engine
engine=human
engine=random
engine=opening_book(engine)
engine=remote ?


for mv in board.moves
   score = ef.eval(board + mv)
   if score > best_score:
    (best_mv, best_score) = mv, score
return best_mv

best_mv, best_score = board.search(minmax(1), ef)

position.pv = ?
position.bm = ?
position.perf = ?
position = algo.search(board)


algo = bl.algo.minmax(ply=3, qiesense=True, max_depth=6)
analysis = algo.apply(board, eval1)

board.play_move(algo)

algo_ab = bl.algo.alphabeta( ply=3, qiesense=True, max_depth=6, config={})
analysis2 = algo.search(board, eval1, time="20s")

score  = analysis[move].score

analysis.max_depth
analysis.cut_nodes
analysis.nodes_per_second
analysis.pv
analysis[pv[0]][pv[1]].nodes ??
```


## Catalog 

```
odo.positions.collection("wac")[1]
odo.positions.starting_position()
odo.positions.chess960.get(3)
odo.positions.chess960.random()


board = positions_lib2.startpos()

board = bc.positions.board_class = BlunderBoard
board = bc.positions.create(dict, castling, en_passant, fifty_clock, move_number)
board = bc.positions.empty()
board = bc.positions.start960[4]
board = bc.positions.startpos()
board = bc.positions.from_fen("PPPP/etc")

board = bc.positions.perft.compare(depth, board1, board2)
board = bc.positions.perft.benchmark(depth, board)
board = bc.positions.perft.counts()

board = bc.positions.bratko_kopec[1]
board = bc.positions.endgames.krr_kbn[1]
board = bc.positions.endgames.kpp_k[1]
board = bc.positions.from_fen("")
board = bc.board(class, dict, castling, en_passant, fifty_clock, move_number)



board.pieces_on(board.w) == "PPPPNBBRQK"

board.contents(board.w)).count('P') == 4

Counter(board.pieces_on(board.w))['P'] == 4

board.contents(board.w)).count('P') == 4

board[:] = "PPPPPNBRRK"
board.w[:] = "PPPPPNBRRK"  ?

board.w[:] = "PPPPPNBRRK"  ?

board[a1] = "R"
board[a1,a2] = "RN"
board[RANK_2] = "P" * 8
board[a1] in "Pp"
if not board[a1]
board[a1] = ''

if ["k", "r"] < board.w.knights.moves.moves[:]:
if "k" in board.w.knights.moves:
movelist is both a region and a dict
board.b.defended

board.b & board.knights & board.b.attacks
bc.eval.passed_pawns(board).count()
bc.eval.unprotected_pawns(board)


immutable

a4.moves ??? but from where
a4.knight_moves
board.w.knights.knight_moves == a3 + a4 + a5
board.w.knights[0].knight_moves == a3 + a4
print(board.w.knights[0].moves)

>> a3 + a4

a3 in board.w.knights[0].moves


board.w & other_board.b ??

board.turn

board.proponent.knights
board.opponent.knights
board.mover.knights
board.waiter.knights
board.active_player.knights
board.inactive_player.knights
board.is_checkmate
board.is_stalemate
board.in_check
board.resign
board.record_to
board.record_to



board.move(a2, a4)
print(board)

bl.display=color
bl.display=coords
bl.display.progress = True

print(board)

print(board.occupied)
X X X X X
X X X
(using display from above)


print(board.w)

checks_with_white_knights = board.w.knights.moves & board.b.king.knight_moves

legal_moves = w.moves
```

## ParsedConfig

config = ParsedConfig()
print(config)
>>> search.threads: default: 4            range: 1..100
>>> search.algo:    default: alphabeta    choices: alphabeta|minmax|mdf
config["search.threads"] = 5
config["search.algo"] = "alphabeta"

eval1 = od.eval.new()
eval1.configure(config)
analysis = algo.apply(board, eval1)



starting pos     : r2qnrnk/p2b2b1/1p1p2pp/2pPpp2/1PP1P3/PRNBB3/3QNPPP/5RK1 w - - 0 1
material         : KQRRBBNNPPPPPPPPkqrrbbnnpppppppp
phase            : 0 %
static eval      : 181 cp
bm               : f2f4
score            : 126 cp
analyse mode     : false
depth            : 7
current_best     : 0000
minmax           : false
clock_checks     : 464385

[task control]
kill switch      : true
progress_callback: not set

[move orderer]
enabled          : true
prior pv         : true
prior bm         : false
tt bm            : true
mvv_lva          : true
order            : SHIGKPQBE
thread           : 0
ply       order pv      order bm   order tt bm
---  ------------- ------------- -------------


[move time estimator]
time_control     : NodeCount(1000000)
pondering        : false
branching factor : 9
const moves rem. : 20
% of time adv    : 100
allotted for mv  : 0.000s
time estimate    : 9.877s
deterministic    : false
nodestime        : 0
elapsed used     : 1.097s

[nmp]
NullMovePruning {
    enabled: true,
    min_leaf_distance: 2,
}

[qsearch]
enabled          : true
only captures    : false
see enabled      : true
ignore see fails : true
promos           : false
see cutoff       : 0
max_ply          : 10
coarse_del_prune : 1000 cp

[eval]
cache eval       : false
cache qeval      : false
material         : true
position         : true
mobility         : true
mob.phase_disable: 70
mob.min_depth:     1
phasing          : true
undefended_piece : 6
undefended_sq    : 3
trapped_peice    : -7
pawn.doubled     : -10
pawn.isolated    : -10
rook.open_file   : 20
contempt         : -30
tempo            : 15
material scores  : [0, 100, 325, 350, 500, 900, 0]
eval stats
name                       value
-------------------- -----------
ALL                     11657400
QUIESCENCE              20239961
MATERIAL                       0
POSITION                       1
MOBILITY                       0
SEE                     35312266
MOVE                    18715030


[repetition]
enabled          : true
prior posn count : 0

[tt]
enabled          : true
use tt for pv    : true
capacity         : 524288
size in mb       : 8
entry size bytes : 16
aging            : true
current age      : 58
hmvc horizon     : 42
min ply          : 4
entry: pv        : 406
entry: cut       : 28182
entry: all       : 2875
entry: unused    : 0
% hits           : 28
% misses         : 55
% collisions     : 16
% exclusions     : 0
ages (cur-0)     : 31585
ages (cur-1)     : 122
ages (cur-2)     : 123
ages (cur-3)     : 110
ages (cur-4)     : 110
ages (cur-5)     : 114
ages (cur-6)     : 125
ages (cur-7)     : 122
ages (cur-8)     : 118
ages (cur-9)     : 112
tt stats
name                       value
-------------------- -----------
hits                     1920169
misses                   3705087
collisions               1101720
exclusions                     0
bad_hash                       0
inserts                  4217192
pv overwrites               6598
ins fail priority        1121359
ins fail owner                 0
deletes                        0

tt nodes
  f2f4     126 cp   6 PV
  f5e4    -126 cp   5 PV
  d3e4     198 cp   5 PV
  c5b4    -198 cp   4 PV
  a3b4     198 cp   3 PV
  g8f6    -198 cp   2 PV
  e4g6     198 cp   1 PV

[killers]
enabled          : true

[stats]
depth            : 7
pv               : f2f4, f5e4, d3e4, c5b4, a3b4, g8e7
score            : 126 cp
clock (detmstic) : 1.780s
clock (realtime) : 1.194s
completed        : false
user cancelled   : false
calc depth       : 7
selective depth  : 35
tot nodes/sec (k): 844
int nodes/sec (k): 50
branching factor : 0.57
q branch factor  : 0.63

ply        total =   [interior  leaf nodes   tt nodes]   beta cuts          pv cuts %     q total  q interior      q leaf  q tt nodes    est_time   real_time  determstic
---    ----------- ----------- ----------- ----------- ----------- ----------- ------ ----------- ----------- ----------- ----------- ----------- ----------- -----------
  0              1           1           0           0           1           3     50           0           0           0           0      0.000s      0.000s      0.000s
  1             37          37           0           0          35          38     92           0           0           0           0      0.000s      0.000s      0.000s
  2            154         154           0           0         108          72     69           0           0           0           0      0.001s      0.000s      0.000s
  3           2042        2006           0           0        1899         893     92          36          31           5           0      0.003s      0.000s      0.000s
  4           8248        5324           0        2512        4366        2909     52         412         218         194           0      0.032s      0.000s      0.000s
  5          86292       25959           0       20600       25697        4454     29       39733        6567       33166           0      0.090s      0.000s      0.000s
  6          62707       26484           1        3418       25230       26418     40       32804       29737        3067           0      0.793s      0.000s      0.000s
  7         194539           0           1           0           0           0      0      194538       41592      152946           0      3.846s      1.097s      1.780s
  8          30415           0           0           0           0           0      0       30415       26687        3728           0      9.877s      0.000s      0.000s
  9          11147           0           0           0           0           0      0       11147       10205         942           0      0.000s      0.000s      0.000s
 10          16755           0           0           0           0           0      0       16755       15637        1118           0      0.000s      0.000s      0.000s
 11          15054           0           0           0           0           0      0       15054       13567        1487           0      0.000s      0.000s      0.000s
 12          21650           0           0           0           0           0      0       21650       19381        2269           0      0.000s      0.000s      0.000s
 13          21630           0           0           0           0           0      0       21630       19357        2273           0      0.000s      0.000s      0.000s
 14          31275           0           0           0           0           0      0       31275       26723        4552           0      0.000s      0.000s      0.000s
 15          30377           0           0           0           0           0      0       30377       26750        3627           0      0.000s      0.000s      0.000s
 16          43269           0           0           0           0           0      0       43269       36048        7221           0      0.000s      0.000s      0.000s
 17          38874           0           0           0           0           0      0       38874       32945        5929           0      0.000s      0.000s      0.000s
 18          51420           0           0           0           0           0      0       51420       40757       10663           0      0.000s      0.000s      0.000s
 19          43541           0           0           0           0           0      0       43541       34481        9060           0      0.000s      0.000s      0.000s
 20          51317           0           0           0           0           0      0       51317       38062       13255           0      0.000s      0.000s      0.000s
 21          40010           0           0           0           0           0      0       40010       30110        9900           0      0.000s      0.000s      0.000s
 22          47917           0           0           0           0           0      0       47917       31227       16690           0      0.000s      0.000s      0.000s
 23          33511           0           0           0           0           0      0       33511       22754       10757           0      0.000s      0.000s      0.000s
 24          40390           0           0           0           0           0      0       40390       22334       18056           0      0.000s      0.000s      0.000s
 25          22822           0           0           0           0           0      0       22822       15358        7464           0      0.000s      0.000s      0.000s
 26          29059           0           0           0           0           0      0       29059       11361       17698           0      0.000s      0.000s      0.000s
 27          12160           0           0           0           0           0      0       12160        7312        4848           0      0.000s      0.000s      0.000s
 28          12665           0           0           0           0           0      0       12665        4251        8414           0      0.000s      0.000s      0.000s
 29           5134           0           0           0           0           0      0        5134        2183        2951           0      0.000s      0.000s      0.000s
 30           3567           0           0           0           0           0      0        3567         729        2838           0      0.000s      0.000s      0.000s
 31            668           0           0           0           0           0      0         668         235         433           0      0.000s      0.000s      0.000s
 32            428           0           0           0           0           0      0         428         156         272           0      0.000s      0.000s      0.000s
 33            195           0           0           0           0           0      0         195          74         121           0      0.000s      0.000s      0.000s
 34            227           0           0           0           0           0      0         227         126         101           0      0.000s      0.000s      0.000s
 35             16           0           0           0           0           0      0          16           8           8           0      0.000s      0.000s      0.000s
---    ----------- ----------- ----------- ----------- ----------- ----------- ------ ----------- ----------- ----------- ----------- ----------- ----------- -----------
tot        1009513       59965           2       26530       57336       34787      5      923016      566963      356053           0      0.000s      1.097s      1.780s

[iterative deepening]
enabled          : true
part_ply         : true
step_size        : 1
start_ply        : 1
end_ply          : 127
iterations       : 7
dep stat     total =   [interior  leaf nodes   tt nodes]   beta cuts          pv cuts %     q total  q interior      q leaf  q tt nodes    est_time   real_time  determstic    score pv
--- ---- ----------- ----------- ----------- ----------- ----------- ----------- ------ ----------- ----------- ----------- ----------- ----------- ----------- ----------- -------- -----------
D1  FULL          41           1          40           0           0           3      0           0           0           0           0      0.000s      0.000s      0.000s   306 cp e3c5
D2  FULL         165          41           0           0          38          43     22         124          64          60           0      0.000s      0.000s      0.000s   195 cp b4c5, d6c5
D3  FULL        2634         131           0           0         100         105      3        2503        1341        1162           0      0.000s      0.004s      0.005s   186 cp e4f5, c5b4, a3b4
D4  FULL        5773        1660           0           0        1604        1629     27        4113        2954        1159           0      0.000s      0.010s      0.011s   163 cp e4f5, c5b4, a3b4, d7f5
D5  FULL       73945        4458           0         156        3969        2663      5       69331       40973       28358           0      0.000s      0.088s      0.140s   174 cp f2f4, f5e4, d3e4, c5b4, a3b4
D6  FULL      378245       43653           0       19065       53265       56960     14      315527      226504       89023           0      0.000s      0.427s      0.643s   126 cp f2f4, f5e4, d3e4, c5b4, a3b4, g8e7     
D7  PART     1009513       59965           2       26530       57336       34787      5      923016      566963      356053           0      0.000s      1.097s      1.780s     +inf f2f4, f5e4, d3e4, c5b4, a3b4, g8e7     
--- ---- ----------- ----------- ----------- ----------- ----------- ----------- ------ ----------- ----------- ----------- ----------- ----------- ----------- ----------- -------- -----------
   cumul     1470316      109909          42       45751      116312       96190      7     1314614      838799      475815           0      0.000s      1.627s      2.579s        - -

[global counts]
name                       value
-------------------- -----------
EVAL CACHE COUNT               0
QEVAL CACHE COUNT              0
EVAL COUNT              11657400
QEVAL COUNT             20239961
LEGAL_MOVE COUNT        35754433
MOVE HASH COUNT         48401052
BOARD HASH COUNT            2276
IDS COMPLETES                168
IDS TIMEOUTS                  23